/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class NonLocalReturnsTestGenerated extends AbstractNonLocalReturnsTest {
    public void testAllFilesPresentInNonLocalReturns() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns"), Pattern.compile("^(.+)\\.1.kt$"), true);
    }

    @TestMetadata("explicitLocalReturn.1.kt")
    public void testExplicitLocalReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/explicitLocalReturn.1.kt");
        doTest(fileName);
    }

    @TestMetadata("justReturnInLambda.1.kt")
    public void testJustReturnInLambda() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/justReturnInLambda.1.kt");
        doTest(fileName);
    }

    @TestMetadata("kt5199.1.kt")
    public void testKt5199() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/kt5199.1.kt");
        doTest(fileName);
    }

    @TestMetadata("kt8948.1.kt")
    public void testKt8948() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/kt8948.1.kt");
        doTest(fileName);
    }

    @TestMetadata("kt8948v2.1.kt")
    public void testKt8948v2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/kt8948v2.1.kt");
        doTest(fileName);
    }

    @TestMetadata("nestedNonLocals.1.kt")
    public void testNestedNonLocals() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/nestedNonLocals.1.kt");
        doTest(fileName);
    }

    @TestMetadata("noInlineLocalReturn.1.kt")
    public void testNoInlineLocalReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/noInlineLocalReturn.1.kt");
        doTest(fileName);
    }

    @TestMetadata("nonLocalReturnFromOuterLambda.1.kt")
    public void testNonLocalReturnFromOuterLambda() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/nonLocalReturnFromOuterLambda.1.kt");
        doTest(fileName);
    }

    @TestMetadata("propertyAccessors.1.kt")
    public void testPropertyAccessors() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/propertyAccessors.1.kt");
        doTest(fileName);
    }

    @TestMetadata("returnFromFunctionExpr.1.kt")
    public void testReturnFromFunctionExpr() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/returnFromFunctionExpr.1.kt");
        doTest(fileName);
    }

    @TestMetadata("simple.1.kt")
    public void testSimple() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/simple.1.kt");
        doTest(fileName);
    }

    @TestMetadata("simpleFunctional.1.kt")
    public void testSimpleFunctional() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/simpleFunctional.1.kt");
        doTest(fileName);
    }

    @TestMetadata("simpleVoid.1.kt")
    public void testSimpleVoid() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/simpleVoid.1.kt");
        doTest(fileName);
    }

    @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Deparenthesize extends AbstractNonLocalReturnsTest {
        public void testAllFilesPresentInDeparenthesize() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize"), Pattern.compile("^(.+)\\.1.kt$"), true);
        }

        @TestMetadata("bracket.1.kt")
        public void testBracket() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize/bracket.1.kt");
            doTest(fileName);
        }

        @TestMetadata("labeled.1.kt")
        public void testLabeled() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/deparenthesize/labeled.1.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TryFinally extends AbstractNonLocalReturnsTest {
        public void testAllFilesPresentInTryFinally() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally"), Pattern.compile("^(.+)\\.1.kt$"), true);
        }

        @TestMetadata("kt6956.1.kt")
        public void testKt6956() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt6956.1.kt");
            doTest(fileName);
        }

        @TestMetadata("kt7273.1.kt")
        public void testKt7273() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/kt7273.1.kt");
            doTest(fileName);
        }

        @TestMetadata("nonLocalReturnFromOuterLambda.1.kt")
        public void testNonLocalReturnFromOuterLambda() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/nonLocalReturnFromOuterLambda.1.kt");
            doTest(fileName);
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CallSite extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInCallSite() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite"), Pattern.compile("^(.+)\\.1.kt$"), true);
            }

            @TestMetadata("callSite.1.kt")
            public void testCallSite() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/callSite.1.kt");
                doTest(fileName);
            }

            @TestMetadata("callSiteComplex.1.kt")
            public void testCallSiteComplex() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/callSiteComplex.1.kt");
                doTest(fileName);
            }

            @TestMetadata("exceptionTableSplit.1.kt")
            public void testExceptionTableSplit() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/exceptionTableSplit.1.kt");
                doTest(fileName);
            }

            @TestMetadata("exceptionTableSplitNoReturn.1.kt")
            public void testExceptionTableSplitNoReturn() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/exceptionTableSplitNoReturn.1.kt");
                doTest(fileName);
            }

            @TestMetadata("finallyInFinally.1.kt")
            public void testFinallyInFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/finallyInFinally.1.kt");
                doTest(fileName);
            }

            @TestMetadata("wrongVarInterval.1.kt")
            public void testWrongVarInterval() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/callSite/wrongVarInterval.1.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Chained extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInChained() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained"), Pattern.compile("^(.+)\\.1.kt$"), true);
            }

            @TestMetadata("finallyInFinally.1.kt")
            public void testFinallyInFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/finallyInFinally.1.kt");
                doTest(fileName);
            }

            @TestMetadata("finallyInFinally2.1.kt")
            public void testFinallyInFinally2() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/finallyInFinally2.1.kt");
                doTest(fileName);
            }

            @TestMetadata("intReturn.1.kt")
            public void testIntReturn() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturn.1.kt");
                doTest(fileName);
            }

            @TestMetadata("intReturnComplex.1.kt")
            public void testIntReturnComplex() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex.1.kt");
                doTest(fileName);
            }

            @TestMetadata("intReturnComplex2.1.kt")
            public void testIntReturnComplex2() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex2.1.kt");
                doTest(fileName);
            }

            @TestMetadata("intReturnComplex3.1.kt")
            public void testIntReturnComplex3() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex3.1.kt");
                doTest(fileName);
            }

            @TestMetadata("intReturnComplex4.1.kt")
            public void testIntReturnComplex4() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/intReturnComplex4.1.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedLambda.1.kt")
            public void testNestedLambda() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/chained/nestedLambda.1.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DeclSite extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInDeclSite() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite"), Pattern.compile("^(.+)\\.1.kt$"), true);
            }

            @TestMetadata("complex.1.kt")
            public void testComplex() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/complex.1.kt");
                doTest(fileName);
            }

            @TestMetadata("intReturn.1.kt")
            public void testIntReturn() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/intReturn.1.kt");
                doTest(fileName);
            }

            @TestMetadata("intReturnComplex.1.kt")
            public void testIntReturnComplex() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/intReturnComplex.1.kt");
                doTest(fileName);
            }

            @TestMetadata("longReturn.1.kt")
            public void testLongReturn() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/longReturn.1.kt");
                doTest(fileName);
            }

            @TestMetadata("nested.1.kt")
            public void testNested() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/nested.1.kt");
                doTest(fileName);
            }

            @TestMetadata("returnInFinally.1.kt")
            public void testReturnInFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInFinally.1.kt");
                doTest(fileName);
            }

            @TestMetadata("returnInTry.1.kt")
            public void testReturnInTry() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInTry.1.kt");
                doTest(fileName);
            }

            @TestMetadata("returnInTryAndFinally.1.kt")
            public void testReturnInTryAndFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/returnInTryAndFinally.1.kt");
                doTest(fileName);
            }

            @TestMetadata("severalInTry.1.kt")
            public void testSeveralInTry() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/severalInTry.1.kt");
                doTest(fileName);
            }

            @TestMetadata("severalInTryComplex.1.kt")
            public void testSeveralInTryComplex() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/severalInTryComplex.1.kt");
                doTest(fileName);
            }

            @TestMetadata("voidInlineFun.1.kt")
            public void testVoidInlineFun() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/voidInlineFun.1.kt");
                doTest(fileName);
            }

            @TestMetadata("voidNonLocal.1.kt")
            public void testVoidNonLocal() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/declSite/voidNonLocal.1.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ExceptionTable extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInExceptionTable() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable"), Pattern.compile("^(.+)\\.1.kt$"), true);
            }

            @TestMetadata("break.1.kt")
            public void testBreak() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/break.1.kt");
                doTest(fileName);
            }

            @TestMetadata("continue.1.kt")
            public void testContinue() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/continue.1.kt");
                doTest(fileName);
            }

            @TestMetadata("exceptionInFinally.1.kt")
            public void testExceptionInFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/exceptionInFinally.1.kt");
                doTest(fileName);
            }

            @TestMetadata("forInFinally.1.kt")
            public void testForInFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/forInFinally.1.kt");
                doTest(fileName);
            }

            @TestMetadata("innerAndExternal.1.kt")
            public void testInnerAndExternal() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternal.1.kt");
                doTest(fileName);
            }

            @TestMetadata("innerAndExternalNested.1.kt")
            public void testInnerAndExternalNested() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternalNested.1.kt");
                doTest(fileName);
            }

            @TestMetadata("innerAndExternalSimple.1.kt")
            public void testInnerAndExternalSimple() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/innerAndExternalSimple.1.kt");
                doTest(fileName);
            }

            @TestMetadata("nested.1.kt")
            public void testNested() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nested.1.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedWithReturns.1.kt")
            public void testNestedWithReturns() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nestedWithReturns.1.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedWithReturnsSimple.1.kt")
            public void testNestedWithReturnsSimple() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/nestedWithReturnsSimple.1.kt");
                doTest(fileName);
            }

            @TestMetadata("noFinally.1.kt")
            public void testNoFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/noFinally.1.kt");
                doTest(fileName);
            }

            @TestMetadata("severalCatchClause.1.kt")
            public void testSeveralCatchClause() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/severalCatchClause.1.kt");
                doTest(fileName);
            }

            @TestMetadata("simpleThrow.1.kt")
            public void testSimpleThrow() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/simpleThrow.1.kt");
                doTest(fileName);
            }

            @TestMetadata("synchonized.1.kt")
            public void testSynchonized() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/synchonized.1.kt");
                doTest(fileName);
            }

            @TestMetadata("throwInFinally.1.kt")
            public void testThrowInFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/throwInFinally.1.kt");
                doTest(fileName);
            }

            @TestMetadata("tryCatchInFinally.1.kt")
            public void testTryCatchInFinally() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/exceptionTable/tryCatchInFinally.1.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Variables extends AbstractNonLocalReturnsTest {
            public void testAllFilesPresentInVariables() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables"), Pattern.compile("^(.+)\\.1.kt$"), true);
            }

            @TestMetadata("kt7792.1.kt")
            public void testKt7792() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxInline/nonLocalReturns/tryFinally/variables/kt7792.1.kt");
                doTest(fileName);
            }
        }
    }
}
